using System;

namespace VelorenPort.Network {
    /// <summary>
    /// Event generated by a <see cref="Participant"/> when channels are created
    /// or deleted. Expressed as a discriminated union to mirror the Rust enum
    /// semantics.
    /// </summary>
    [Serializable]
    public abstract record ParticipantEvent {
        public sealed record ChannelCreated(ConnectAddr Address) : ParticipantEvent;
        public sealed record ChannelDeleted(ConnectAddr Address) : ParticipantEvent;
        /// <summary>
        /// Notification that a group event occurred. This is used by the
        /// server to relay <see cref="CoreEngine.comp.GroupEvent"/> updates to
        /// interested networking layers.
        /// </summary>
        public sealed record GroupUpdate(CoreEngine.comp.GroupEvent Event) : ParticipantEvent;

        /// <summary>
        /// Notification that a group privilege changed.
        /// </summary>
        public sealed record GroupPrivilegeUpdate(CoreEngine.comp.Group Group, CoreEngine.comp.Uid Member, CoreEngine.comp.GroupPrivileges Privileges) : ParticipantEvent;

        /// <summary>
        /// Debug information sent by the remote participant. Only produced when
        /// debug frames are received.
        /// </summary>
        public sealed record DebugFrame(string Message) : ParticipantEvent;
    }
}
